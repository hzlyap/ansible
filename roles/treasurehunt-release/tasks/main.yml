---
- name: Register new task definition
  ecs_taskdefinition:
    containers:
    - name: "{{ TH_REL_CONTAINER_NAME }}"
      cpu: "{{ TH_REL_CONTAINER_CPU }}"
      command:
        - >
          start.sh
      essential: true
      environment:
        - name: "API_URL"
          value: "{{ TH_REL_ENV_API_URL }}"
        - name: "AWS_CONFIG"
          value: "{{ TH_REL_ENV_AWS_CONFIG }}"
        - name: "AWS_MEDIA_URL"
          value: "{{ TH_REL_ENV_AWS_MEDIA_URL }}"
        - name: "AWS_S3_ACCESS_KEY_ID"
          value: "{{ TH_REL_ENV_AWS_S3_ACCESS_KEY_ID }}"
        - name: "AWS_S3_BUCKET"
          value: "{{ TH_REL_ENV_AWS_S3_BUCKET }}"
        - name: "AWS_S3_SECRET_ACCESS_KEY"
          value: "{{ vault_TH_REL_ENV_AWS_S3_SECRET_ACCESS_KEY }}"
        - name: "AWS_SNS_ACCESS_KEY_ID"
          value: "{{ TH_REL_ENV_AWS_SNS_ACCESS_KEY_ID }}"
        - name: "AWS_SNS_SECRET_ACCESS_KEY"
          value: "{{ vault_TH_REL_ENV_AWS_SNS_SECRET_ACCESS_KEY }}"
        - name: "FCM_PUSH_TOKEN"
          value: "{{ vault_TH_REL_ENV_FCM_PUSH_TOKEN }}"
        - name: "FCM_SUBSCRIBE_URL"
          value: "{{ TH_REL_ENV_FCM_SUBSCRIBE_URL }}"
        - name: "FCM_UNSUBSCRIBE_URL"
          value: "{{ TH_REL_ENV_FCM_UNSUBSCRIBE_URL }}"
        - name: "HOST"
          value: "{{ TH_REL_ENV_HOST }}"
        - name: "JWT_EXPIRATION"
          value: "{{ TH_REL_ENV_JWT_EXPIRATION }}"
        - name: "JWT_ISSUER"
          value: "{{ TH_REL_ENV_JWT_ISSUER }}"
        - name: "JWT_REFRESH_EXPIRATION"
          value: "{{ TH_REL_ENV_JWT_REFRESH_EXPIRATION }}"
        - name: "JWT_REFRESH_SECRET"
          value: "{{ vault_TH_REL_ENV_JWT_REFRESH_SECRET }}"
        - name: "JWT_SECRET"
          value: "{{ vault_TH_REL_ENV_JWT_SECRET }}"
        - name: "KINESIS_CAMPAIGN_STREAM"
          value: "{{ TH_REL_ENV_KINESIS_CAMPAIGN_STREAM }}"
        - name: "KINESIS_IMPRESSION_STREAM"
          value: "{{ TH_REL_ENV_KINESIS_IMPRESSION_STREAM }}"
        - name: "KINESIS_PROMO_STREAM"
          value: "{{ TH_REL_ENV_KINESIS_PROMO_STREAM }}"
        - name: "MOBILE360_API_URL"
          value: "{{ TH_REL_ENV_MOBILE360_API_URL }}"
        - name: "MOBILE360_PASSWORD"
          value: "{{ vault_TH_REL_ENV_MOBILE360_PASSWORD }}"
        - name: "MOBILE360_SHORTCODE_MASK"
          value: "{{ TH_REL_ENV_MOBILE360_SHORTCODE_MASK }}"
        - name: "MOBILE360_USERNAME"
          value: "{{ TH_REL_ENV_MOBILE360_USERNAME }}"
        - name: "MQTT_BROKER"
          value: "{{ TH_REL_ENV_MQTT_BROKER }}"
        - name: "NODE_ENV"
          value: "{{ TH_REL_ENV_NODE_ENV }}"
        - name: "PG_DB"
          value: "{{ TH_REL_ENV_PG_DB }}"
        - name: "PG_HOST"
          value: "{{ TH_REL_ENV_PG_HOST }}"
        - name: "PG_PASSWORD"
          value: "{{ vault_TH_REL_ENV_PG_PASSWORD }}"
        - name: "PG_PORT"
          value: "{{ TH_REL_ENV_PG_PORT }}"
        - name: "PG_USER"
          value: "{{ TH_REL_ENV_PG_USER }}"
        - name: "PORT"
          value: "{{ TH_REL_ENV_PORT }}"
        - name: "REDIRECTION_URL"
          value: "{{ TH_REL_ENV_REDIRECTION_URL }}"
        - name: "USE_DOCKER"
          value: "{{ TH_REL_ENV_USE_DOCKER }}"
      image: 957522172514.dkr.ecr.us-east-1.amazonaws.com/treasurehunt-api-release:latest
      logConfiguration:
        logDriver: awslogs
        options:
          awslogs-group: /ecs/treasurehunt-api-release
          awslogs-region: us-east-1
          awslogs-stream-prefix: ecs
      memoryReservation: "{{ TH_REL_CONTAINER_MEM_RESERVATION }}"
      portMappings:
      - containerPort: "{{ TH_REL_CONTAINER_PORT }}"
    execution_role_arn: arn:aws:iam::957522172514:role/treasurehunt-ecs-task-execution-role
    family: "{{ TH_REL_SERVICE_NAME }}"
    force_create: yes
    launch_type: FARGATE
    cpu: "{{ TH_REL_CPU }}"
    memory: "{{ TH_REL_MEMORY }}"
    network_mode: awsvpc
    region: "{{ TH_REL_REGION }}"
    state: present
  register: task_output

- name: Get ECS service info
  ecs_service_info:
    cluster: "{{ TH_REL_CLUSTER_NAME }}"
    service: "{{ TH_REL_SERVICE_NAME }}"
    details: true
  register: ecs_service_facts_result

- set_fact:
    loadbalancers: "{{ ecs_service_facts_result.services[0].loadBalancers }}"
  when: ecs_service_facts_result.services | count

- name: Update service to latest task definition
  ecs_service:
    cluster: "{{ TH_REL_CLUSTER_NAME }}"
    desired_count: "{{ TH_REL_TASK_COUNT }}"
    deployment_configuration:
      minimum_healthy_percent: 50
      maximum_percent: 100
    load_balancers: "{{ loadbalancers }}"
    name: "{{ TH_REL_SERVICE_NAME }}"
    state: present
    task_definition: "{{ TH_REL_TASK_DEFINITION_NAME }}"
    
